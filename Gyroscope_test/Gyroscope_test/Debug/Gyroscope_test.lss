
Gyroscope_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000f36  00000fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080020e  0080020e  00000fd8  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  000043d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00004d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fab  00000000  00000000  00004e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000272  00000000  00000000  00005deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e4  00000000  00000000  0000605d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00006744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000281  00000000  00000000  00006914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f9  00000000  00000000  00006b95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
   4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
   8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
   c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  e4:	07 63       	ori	r16, 0x37	; 55
  e6:	42 36       	cpi	r20, 0x62	; 98
  e8:	b7 9b       	sbis	0x16, 7	; 22
  ea:	d8 a7       	lds	r29, 0x78
  ec:	1a 39       	cpi	r17, 0x9A	; 154
  ee:	68 56       	subi	r22, 0x68	; 104
  f0:	18 ae       	sts	0xb8, r17
  f2:	ba ab       	sts	0x5a, r27
  f4:	55 8c       	ldd	r5, Z+29	; 0x1d
  f6:	1d 3c       	cpi	r17, 0xCD	; 205
  f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
  fa:	57 63       	ori	r21, 0x37	; 55
  fc:	bd 6d       	ori	r27, 0xDD	; 221
  fe:	ed fd       	.word	0xfded	; ????
 100:	75 3e       	cpi	r23, 0xE5	; 229
 102:	f6 17       	cp	r31, r22
 104:	72 31       	cpi	r23, 0x12	; 18
 106:	bf 00       	.word	0x00bf	; ????
 108:	00 00       	nop
 10a:	80 3f       	cpi	r24, 0xF0	; 240
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 00       	nop
 110:	be 92       	st	-X, r11
 112:	24 49       	sbci	r18, 0x94	; 148
 114:	12 3e       	cpi	r17, 0xE2	; 226
 116:	ab aa       	sts	0x9b, r26
 118:	aa 2a       	or	r10, r26
 11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
 11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 11e:	4c 3e       	cpi	r20, 0xEC	; 236
 120:	00 00       	nop
 122:	00 80       	ld	r0, Z
 124:	be ab       	sts	0x5e, r27
 126:	aa aa       	sts	0x9a, r26
 128:	aa 3e       	cpi	r26, 0xEA	; 234
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	bf 00       	.word	0x00bf	; ????
 130:	00 00       	nop
 132:	80 3f       	cpi	r24, 0xF0	; 240
 134:	00 00       	nop
 136:	00 00       	nop
 138:	00 08       	sbc	r0, r0
 13a:	41 78       	andi	r20, 0x81	; 129
 13c:	d3 bb       	out	0x13, r29	; 19
 13e:	43 87       	std	Z+11, r20	; 0x0b
 140:	d1 13       	cpse	r29, r17
 142:	3d 19       	sub	r19, r13
 144:	0e 3c       	cpi	r16, 0xCE	; 206
 146:	c3 bd       	out	0x23, r28	; 35
 148:	42 82       	std	Z+2, r4	; 0x02
 14a:	ad 2b       	or	r26, r29
 14c:	3e 68       	ori	r19, 0x8E	; 142
 14e:	ec 82       	std	Y+4, r14	; 0x04
 150:	76 be       	out	0x36, r7	; 54
 152:	d9 8f       	std	Y+25, r29	; 0x19
 154:	e1 a9       	sts	0x41, r30
 156:	3e 4c       	sbci	r19, 0xCE	; 206
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	ff be       	out	0x3f, r15	; 63
 15c:	01 c4       	rjmp	.+2050   	; 0x960 <__fixunssfsi+0x50>
 15e:	ff 7f       	andi	r31, 0xFF	; 255
 160:	3f 00       	.word	0x003f	; ????
 162:	00 00       	nop
	...

00000166 <__ctors_end>:
 166:	11 24       	eor	r1, r1
 168:	1f be       	out	0x3f, r1	; 63
 16a:	cf ef       	ldi	r28, 0xFF	; 255
 16c:	d1 e2       	ldi	r29, 0x21	; 33
 16e:	de bf       	out	0x3e, r29	; 62
 170:	cd bf       	out	0x3d, r28	; 61
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
 176:	12 e0       	ldi	r17, 0x02	; 2
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b2 e0       	ldi	r27, 0x02	; 2
 17c:	e6 e3       	ldi	r30, 0x36	; 54
 17e:	ff e0       	ldi	r31, 0x0F	; 15
 180:	00 e0       	ldi	r16, 0x00	; 0
 182:	0b bf       	out	0x3b, r16	; 59
 184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
 186:	07 90       	elpm	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	ae 30       	cpi	r26, 0x0E	; 14
 18c:	b1 07       	cpc	r27, r17
 18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
 190:	12 e0       	ldi	r17, 0x02	; 2
 192:	ae e0       	ldi	r26, 0x0E	; 14
 194:	b2 e0       	ldi	r27, 0x02	; 2
 196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
 198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
 19a:	ac 31       	cpi	r26, 0x1C	; 28
 19c:	b1 07       	cpc	r27, r17
 19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
 1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <main>
 1a4:	0c 94 99 07 	jmp	0xf32	; 0xf32 <_exit>

000001a8 <__bad_interrupt>:
 1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	86 e6       	ldi	r24, 0x66	; 102
 1ae:	9e e0       	ldi	r25, 0x0E	; 14
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x4>
 1b4:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1be:	42 9a       	sbi	0x08, 2	; 8
 1c0:	ef ef       	ldi	r30, 0xFF	; 255
 1c2:	f7 e4       	ldi	r31, 0x47	; 71
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x18>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x1e>
 1ca:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1cc:	42 98       	cbi	0x08, 2	; 8
 1ce:	e6 e6       	ldi	r30, 0x66	; 102
 1d0:	fe e0       	ldi	r31, 0x0E	; 14
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x26>
 1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1de:	42 9a       	sbi	0x08, 2	; 8
 1e0:	ef ef       	ldi	r30, 0xFF	; 255
 1e2:	f7 e4       	ldi	r31, 0x47	; 71
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_set_4bit+0x3e>
 1ea:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1ec:	42 98       	cbi	0x08, 2	; 8
 1ee:	e6 e6       	ldi	r30, 0x66	; 102
 1f0:	fe e0       	ldi	r31, 0x0E	; 14
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
 1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1fe:	42 9a       	sbi	0x08, 2	; 8
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	97 e4       	ldi	r25, 0x47	; 71
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x58>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x5e>
 20a:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 20c:	42 98       	cbi	0x08, 2	; 8
 20e:	e6 e6       	ldi	r30, 0x66	; 102
 210:	fe e0       	ldi	r31, 0x0E	; 14
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x66>
 216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 220:	42 9a       	sbi	0x08, 2	; 8
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	97 e4       	ldi	r25, 0x47	; 71
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x7a>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x80>
 22c:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 22e:	42 98       	cbi	0x08, 2	; 8
}
 230:	08 95       	ret

00000232 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 232:	98 b1       	in	r25, 0x08	; 8
 234:	9f 70       	andi	r25, 0x0F	; 15
 236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 238:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 23a:	28 2f       	mov	r18, r24
 23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 23e:	92 2b       	or	r25, r18
 240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 246:	42 9a       	sbi	0x08, 2	; 8
 248:	ef ef       	ldi	r30, 0xFF	; 255
 24a:	f7 e4       	ldi	r31, 0x47	; 71
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_wr_command+0x1a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_wr_command+0x20>
 252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 256:	98 b1       	in	r25, 0x08	; 8
 258:	9f 70       	andi	r25, 0x0F	; 15
 25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 25e:	82 95       	swap	r24
 260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 262:	89 2b       	or	r24, r25
 264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 26a:	42 9a       	sbi	0x08, 2	; 8
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	97 e4       	ldi	r25, 0x47	; 71
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_command+0x3e>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_command+0x44>
 276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 278:	42 98       	cbi	0x08, 2	; 8
}
 27a:	08 95       	ret

0000027c <lcd_init>:
 27c:	86 e6       	ldi	r24, 0x66	; 102
 27e:	9e e0       	ldi	r25, 0x0E	; 14
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x4>
 284:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 286:	88 e2       	ldi	r24, 0x28	; 40
 288:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 298:	8e e0       	ldi	r24, 0x0E	; 14
 29a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
 2a4:	08 95       	ret

000002a6 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 2a6:	98 b1       	in	r25, 0x08	; 8
 2a8:	9f 70       	andi	r25, 0x0F	; 15
 2aa:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 2ac:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 2ae:	28 2f       	mov	r18, r24
 2b0:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 2b2:	92 2b       	or	r25, r18
 2b4:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 2b6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 2b8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 2ba:	42 9a       	sbi	0x08, 2	; 8
 2bc:	ef ef       	ldi	r30, 0xFF	; 255
 2be:	f7 e4       	ldi	r31, 0x47	; 71
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_wr_char+0x1a>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_wr_char+0x20>
 2c6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 2c8:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 2ca:	98 b1       	in	r25, 0x08	; 8
 2cc:	9f 70       	andi	r25, 0x0F	; 15
 2ce:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 2d0:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 2d2:	82 95       	swap	r24
 2d4:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 2d6:	89 2b       	or	r24, r25
 2d8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 2da:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 2dc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 2de:	42 9a       	sbi	0x08, 2	; 8
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	97 e4       	ldi	r25, 0x47	; 71
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_wr_char+0x3e>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_wr_char+0x44>
 2ea:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 2ec:	42 98       	cbi	0x08, 2	; 8
}
 2ee:	08 95       	ret

000002f0 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 2f0:	80 e8       	ldi	r24, 0x80	; 128
 2f2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
 2f6:	08 95       	ret

000002f8 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2fe:	88 81       	ld	r24, Y
 300:	88 23       	and	r24, r24
 302:	31 f0       	breq	.+12     	; 0x310 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 304:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 306:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 30a:	89 91       	ld	r24, Y+
 30c:	88 23       	and	r24, r24
 30e:	d9 f7       	brne	.-10     	; 0x306 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	79 f0       	breq	.+30     	; 0x338 <lcd_cursor+0x22>
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	18 f4       	brcc	.+6      	; 0x324 <lcd_cursor+0xe>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	c9 f4       	brne	.+50     	; 0x354 <lcd_cursor+0x3e>
 322:	05 c0       	rjmp	.+10     	; 0x32e <lcd_cursor+0x18>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	69 f0       	breq	.+26     	; 0x342 <lcd_cursor+0x2c>
 328:	84 30       	cpi	r24, 0x04	; 4
 32a:	a1 f4       	brne	.+40     	; 0x354 <lcd_cursor+0x3e>
 32c:	0f c0       	rjmp	.+30     	; 0x34c <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 32e:	86 2f       	mov	r24, r22
 330:	81 58       	subi	r24, 0x81	; 129
 332:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
 336:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 338:	86 2f       	mov	r24, r22
 33a:	81 54       	subi	r24, 0x41	; 65
 33c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
 340:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 342:	86 2f       	mov	r24, r22
 344:	8d 56       	subi	r24, 0x6D	; 109
 346:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
 34a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 34c:	86 2f       	mov	r24, r22
 34e:	8d 52       	subi	r24, 0x2D	; 45
 350:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
 354:	08 95       	ret

00000356 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	8a 01       	movw	r16, r20
 360:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 362:	88 23       	and	r24, r24
 364:	11 f0       	breq	.+4      	; 0x36a <lcd_print+0x14>
 366:	66 23       	and	r22, r22
 368:	19 f4       	brne	.+6      	; 0x370 <lcd_print+0x1a>
	{
		lcd_home();
 36a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_home>
 36e:	02 c0       	rjmp	.+4      	; 0x374 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 370:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 374:	c5 30       	cpi	r28, 0x05	; 5
 376:	d1 05       	cpc	r29, r1
 378:	71 f4       	brne	.+28     	; 0x396 <lcd_print+0x40>
	{
		million=value/10000+48;
 37a:	c8 01       	movw	r24, r16
 37c:	60 e1       	ldi	r22, 0x10	; 16
 37e:	77 e2       	ldi	r23, 0x27	; 39
 380:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodhi4>
 384:	cb 01       	movw	r24, r22
 386:	c0 96       	adiw	r24, 0x30	; 48
 388:	90 93 0f 02 	sts	0x020F, r25
 38c:	80 93 0e 02 	sts	0x020E, r24
		lcd_wr_char(million);
 390:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
 394:	03 c0       	rjmp	.+6      	; 0x39c <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 396:	c4 30       	cpi	r28, 0x04	; 4
 398:	d1 05       	cpc	r29, r1
 39a:	b9 f4       	brne	.+46     	; 0x3ca <lcd_print+0x74>
	{
		temp = value/1000;
 39c:	c8 01       	movw	r24, r16
 39e:	68 ee       	ldi	r22, 0xE8	; 232
 3a0:	73 e0       	ldi	r23, 0x03	; 3
 3a2:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodhi4>
 3a6:	cb 01       	movw	r24, r22
 3a8:	70 93 11 02 	sts	0x0211, r23
 3ac:	60 93 10 02 	sts	0x0210, r22
		thousand = temp%10 + 48;
 3b0:	6a e0       	ldi	r22, 0x0A	; 10
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodhi4>
 3b8:	c0 96       	adiw	r24, 0x30	; 48
 3ba:	90 93 1b 02 	sts	0x021B, r25
 3be:	80 93 1a 02 	sts	0x021A, r24
		lcd_wr_char(thousand);
 3c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 3cc:	c3 30       	cpi	r28, 0x03	; 3
 3ce:	d1 05       	cpc	r29, r1
 3d0:	11 f0       	breq	.+4      	; 0x3d6 <lcd_print+0x80>
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	b1 f4       	brne	.+44     	; 0x402 <lcd_print+0xac>
	{
		temp = value/100;
 3d6:	c8 01       	movw	r24, r16
 3d8:	64 e6       	ldi	r22, 0x64	; 100
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodhi4>
 3e0:	cb 01       	movw	r24, r22
 3e2:	70 93 11 02 	sts	0x0211, r23
 3e6:	60 93 10 02 	sts	0x0210, r22
		hundred = temp%10 + 48;
 3ea:	6a e0       	ldi	r22, 0x0A	; 10
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodhi4>
 3f2:	c0 96       	adiw	r24, 0x30	; 48
 3f4:	90 93 17 02 	sts	0x0217, r25
 3f8:	80 93 16 02 	sts	0x0216, r24
		lcd_wr_char(hundred);
 3fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
 400:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 402:	c2 30       	cpi	r28, 0x02	; 2
 404:	d1 05       	cpc	r29, r1
 406:	11 f0       	breq	.+4      	; 0x40c <lcd_print+0xb6>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	b1 f4       	brne	.+44     	; 0x438 <lcd_print+0xe2>
	{
		temp = value/10;
 40c:	2a e0       	ldi	r18, 0x0A	; 10
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	c8 01       	movw	r24, r16
 412:	b9 01       	movw	r22, r18
 414:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodhi4>
 418:	cb 01       	movw	r24, r22
 41a:	70 93 11 02 	sts	0x0211, r23
 41e:	60 93 10 02 	sts	0x0210, r22
		tens = temp%10 + 48;
 422:	b9 01       	movw	r22, r18
 424:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodhi4>
 428:	c0 96       	adiw	r24, 0x30	; 48
 42a:	90 93 15 02 	sts	0x0215, r25
 42e:	80 93 14 02 	sts	0x0214, r24
		lcd_wr_char(tens);
 432:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
 436:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 438:	c1 30       	cpi	r28, 0x01	; 1
 43a:	d1 05       	cpc	r29, r1
 43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0xec>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	61 f4       	brne	.+24     	; 0x45a <lcd_print+0x104>
	{
		unit = value%10 + 48;
 442:	c8 01       	movw	r24, r16
 444:	6a e0       	ldi	r22, 0x0A	; 10
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodhi4>
 44c:	c0 96       	adiw	r24, 0x30	; 48
 44e:	90 93 19 02 	sts	0x0219, r25
 452:	80 93 18 02 	sts	0x0218, r24
		lcd_wr_char(unit);
 456:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
	}
	if(digits>5)
 45a:	c6 30       	cpi	r28, 0x06	; 6
 45c:	d1 05       	cpc	r29, r1
 45e:	1c f0       	brlt	.+6      	; 0x466 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 460:	85 e4       	ldi	r24, 0x45	; 69
 462:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
	}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}	
 476:	08 95       	ret

00000478 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
 478:	87 b1       	in	r24, 0x07	; 7
 47a:	87 6f       	ori	r24, 0xF7	; 247
 47c:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
 47e:	88 b1       	in	r24, 0x08	; 8
 480:	80 78       	andi	r24, 0x80	; 128
 482:	88 b9       	out	0x08, r24	; 8
}
 484:	08 95       	ret

00000486 <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
 486:	ec eb       	ldi	r30, 0xBC	; 188
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
 48c:	80 e1       	ldi	r24, 0x10	; 16
 48e:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
 492:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
 496:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	80 83       	st	Z, r24
}
 49e:	08 95       	ret

000004a0 <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
 4a0:	94 ea       	ldi	r25, 0xA4	; 164
 4a2:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 4a6:	ec eb       	ldi	r30, 0xBC	; 188
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	90 81       	ld	r25, Z
 4ac:	99 23       	and	r25, r25
 4ae:	ec f7       	brge	.-6      	; 0x4aa <write_byte+0xa>
 4b0:	ef ef       	ldi	r30, 0xFF	; 255
 4b2:	ff e8       	ldi	r31, 0x8F	; 143
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <write_byte+0x14>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <write_byte+0x1a>
 4ba:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
 4bc:	92 ed       	ldi	r25, 0xD2	; 210
 4be:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
 4c2:	94 e8       	ldi	r25, 0x84	; 132
 4c4:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 4c8:	ec eb       	ldi	r30, 0xBC	; 188
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	90 81       	ld	r25, Z
 4ce:	99 23       	and	r25, r25
 4d0:	ec f7       	brge	.-6      	; 0x4cc <write_byte+0x2c>
 4d2:	ef ef       	ldi	r30, 0xFF	; 255
 4d4:	ff e8       	ldi	r31, 0x8F	; 143
 4d6:	31 97       	sbiw	r30, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <write_byte+0x36>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <write_byte+0x3c>
 4dc:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
 4de:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
 4e2:	94 e8       	ldi	r25, 0x84	; 132
 4e4:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 4e8:	ec eb       	ldi	r30, 0xBC	; 188
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	90 81       	ld	r25, Z
 4ee:	99 23       	and	r25, r25
 4f0:	ec f7       	brge	.-6      	; 0x4ec <write_byte+0x4c>
 4f2:	ef ef       	ldi	r30, 0xFF	; 255
 4f4:	ff e8       	ldi	r31, 0x8F	; 143
 4f6:	31 97       	sbiw	r30, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <write_byte+0x56>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <write_byte+0x5c>
 4fc:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
 4fe:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
 502:	84 e8       	ldi	r24, 0x84	; 132
 504:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 508:	ec eb       	ldi	r30, 0xBC	; 188
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	88 23       	and	r24, r24
 510:	ec f7       	brge	.-6      	; 0x50c <write_byte+0x6c>
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	9f e8       	ldi	r25, 0x8F	; 143
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <write_byte+0x76>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <write_byte+0x7c>
 51c:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
 51e:	84 e9       	ldi	r24, 0x94	; 148
 520:	80 93 bc 00 	sts	0x00BC, r24
}
 524:	08 95       	ret

00000526 <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
 526:	94 ea       	ldi	r25, 0xA4	; 164
 528:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 52c:	ec eb       	ldi	r30, 0xBC	; 188
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	90 81       	ld	r25, Z
 532:	99 23       	and	r25, r25
 534:	ec f7       	brge	.-6      	; 0x530 <read_byte+0xa>
 536:	af ef       	ldi	r26, 0xFF	; 255
 538:	bf e8       	ldi	r27, 0x8F	; 143
 53a:	11 97       	sbiw	r26, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <read_byte+0x14>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <read_byte+0x1a>
 540:	00 00       	nop
 _delay_ms(10);

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
 542:	92 ed       	ldi	r25, 0xD2	; 210
 544:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
 548:	94 e8       	ldi	r25, 0x84	; 132
 54a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 54e:	ec eb       	ldi	r30, 0xBC	; 188
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	90 81       	ld	r25, Z
 554:	99 23       	and	r25, r25
 556:	ec f7       	brge	.-6      	; 0x552 <read_byte+0x2c>
 558:	ef ef       	ldi	r30, 0xFF	; 255
 55a:	ff e8       	ldi	r31, 0x8F	; 143
 55c:	31 97       	sbiw	r30, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <read_byte+0x36>
 560:	00 c0       	rjmp	.+0      	; 0x562 <read_byte+0x3c>
 562:	00 00       	nop
 _delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
 564:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
 568:	84 e8       	ldi	r24, 0x84	; 132
 56a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 56e:	ec eb       	ldi	r30, 0xBC	; 188
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	88 23       	and	r24, r24
 576:	ec f7       	brge	.-6      	; 0x572 <read_byte+0x4c>
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	9f e8       	ldi	r25, 0x8F	; 143
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <read_byte+0x56>
 580:	00 c0       	rjmp	.+0      	; 0x582 <read_byte+0x5c>
 582:	00 00       	nop
 _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
 584:	84 ea       	ldi	r24, 0xA4	; 164
 586:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 58a:	ec eb       	ldi	r30, 0xBC	; 188
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	88 23       	and	r24, r24
 592:	ec f7       	brge	.-6      	; 0x58e <read_byte+0x68>
 594:	af ef       	ldi	r26, 0xFF	; 255
 596:	bf e8       	ldi	r27, 0x8F	; 143
 598:	11 97       	sbiw	r26, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <read_byte+0x72>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <read_byte+0x78>
 59e:	00 00       	nop
 _delay_ms(10);


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
 5a0:	83 ed       	ldi	r24, 0xD3	; 211
 5a2:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
 5a6:	84 e8       	ldi	r24, 0x84	; 132
 5a8:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5ac:	ec eb       	ldi	r30, 0xBC	; 188
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	88 23       	and	r24, r24
 5b4:	ec f7       	brge	.-6      	; 0x5b0 <read_byte+0x8a>
 5b6:	ef ef       	ldi	r30, 0xFF	; 255
 5b8:	ff e8       	ldi	r31, 0x8F	; 143
 5ba:	31 97       	sbiw	r30, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <read_byte+0x94>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <read_byte+0x9a>
 5c0:	00 00       	nop
 _delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
 5c2:	84 e8       	ldi	r24, 0x84	; 132
 5c4:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5c8:	ec eb       	ldi	r30, 0xBC	; 188
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	88 23       	and	r24, r24
 5d0:	ec f7       	brge	.-6      	; 0x5cc <read_byte+0xa6>
 rtc_recv_data = TWDR;
 5d2:	eb eb       	ldi	r30, 0xBB	; 187
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	af ef       	ldi	r26, 0xFF	; 255
 5da:	bf e8       	ldi	r27, 0x8F	; 143
 5dc:	11 97       	sbiw	r26, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <read_byte+0xb6>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <read_byte+0xbc>
 5e2:	00 00       	nop
 _delay_ms(10);
 

 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
 5e4:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
 5e6:	94 e8       	ldi	r25, 0x84	; 132
 5e8:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5ec:	ec eb       	ldi	r30, 0xBC	; 188
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	90 81       	ld	r25, Z
 5f2:	99 23       	and	r25, r25
 5f4:	ec f7       	brge	.-6      	; 0x5f0 <read_byte+0xca>
 5f6:	ef ef       	ldi	r30, 0xFF	; 255
 5f8:	ff e8       	ldi	r31, 0x8F	; 143
 5fa:	31 97       	sbiw	r30, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <read_byte+0xd4>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <read_byte+0xda>
 600:	00 00       	nop
 _delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
 602:	08 95       	ret

00000604 <display_format_init>:
//------------------------------------------------------------------------------
// initialise the diaplay format  
//------------------------------------------------------------------------------
void display_format_init(void)
{
 lcd_cursor (1, 1);
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
 lcd_string("  :  :  ");  
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	92 e0       	ldi	r25, 0x02	; 2
 610:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_string>
}
 614:	08 95       	ret

00000616 <init_devices>:

// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
 616:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
 618:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_port_config>
 twi_init();         // configur the I2cC, i.e TWI module 
 61c:	0e 94 43 02 	call	0x486	; 0x486 <twi_init>
 sei();              // re-enable interrupts
 620:	78 94       	sei
 //all peripherals are now initialized
}
 622:	08 95       	ret

00000624 <btod>:

int btod(int n) /* Function to convert binary to decimal.*/
{
 624:	2f 92       	push	r2
 626:	3f 92       	push	r3
 628:	4f 92       	push	r4
 62a:	5f 92       	push	r5
 62c:	6f 92       	push	r6
 62e:	7f 92       	push	r7
 630:	8f 92       	push	r8
 632:	9f 92       	push	r9
 634:	af 92       	push	r10
 636:	bf 92       	push	r11
 638:	cf 92       	push	r12
 63a:	df 92       	push	r13
 63c:	ef 92       	push	r14
 63e:	ff 92       	push	r15
 640:	0f 93       	push	r16
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	2c 01       	movw	r4, r24
	int decimal=0, i=0, rem;
	while (n!=0)
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	09 f4       	brne	.+2      	; 0x650 <btod+0x2c>
 64e:	52 c0       	rjmp	.+164    	; 0x6f4 <btod+0xd0>
 //all peripherals are now initialized
}

int btod(int n) /* Function to convert binary to decimal.*/
{
	int decimal=0, i=0, rem;
 650:	88 24       	eor	r8, r8
 652:	99 24       	eor	r9, r9
 654:	00 e0       	ldi	r16, 0x00	; 0
 656:	10 e0       	ldi	r17, 0x00	; 0
	while (n!=0)
	{
		rem = n%10;
 658:	0f 2e       	mov	r0, r31
 65a:	fa e0       	ldi	r31, 0x0A	; 10
 65c:	2f 2e       	mov	r2, r31
 65e:	33 24       	eor	r3, r3
 660:	f0 2d       	mov	r31, r0
		n/=10;
 662:	c2 01       	movw	r24, r4
 664:	b1 01       	movw	r22, r2
 666:	0e 94 86 07 	call	0xf0c	; 0xf0c <__divmodhi4>
 66a:	2b 01       	movw	r4, r22
 66c:	3c 01       	movw	r6, r24
		decimal += rem*pow(2,i);
 66e:	b4 01       	movw	r22, r8
 670:	88 27       	eor	r24, r24
 672:	77 fd       	sbrc	r23, 7
 674:	80 95       	com	r24
 676:	98 2f       	mov	r25, r24
 678:	0e 94 b6 04 	call	0x96c	; 0x96c <__floatsisf>
 67c:	9b 01       	movw	r18, r22
 67e:	ac 01       	movw	r20, r24
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e4       	ldi	r25, 0x40	; 64
 688:	0e 94 a5 05 	call	0xb4a	; 0xb4a <pow>
 68c:	c6 2f       	mov	r28, r22
 68e:	d7 2f       	mov	r29, r23
 690:	b8 2e       	mov	r11, r24
 692:	a9 2e       	mov	r10, r25
 694:	b8 01       	movw	r22, r16
 696:	88 27       	eor	r24, r24
 698:	77 fd       	sbrc	r23, 7
 69a:	80 95       	com	r24
 69c:	98 2f       	mov	r25, r24
 69e:	0e 94 b6 04 	call	0x96c	; 0x96c <__floatsisf>
 6a2:	6b 01       	movw	r12, r22
 6a4:	7c 01       	movw	r14, r24
 6a6:	b3 01       	movw	r22, r6
 6a8:	88 27       	eor	r24, r24
 6aa:	77 fd       	sbrc	r23, 7
 6ac:	80 95       	com	r24
 6ae:	98 2f       	mov	r25, r24
 6b0:	0e 94 b6 04 	call	0x96c	; 0x96c <__floatsisf>
 6b4:	0c 2f       	mov	r16, r28
 6b6:	1d 2f       	mov	r17, r29
 6b8:	2b 2d       	mov	r18, r11
 6ba:	3a 2d       	mov	r19, r10
 6bc:	a9 01       	movw	r20, r18
 6be:	98 01       	movw	r18, r16
 6c0:	0e 94 42 05 	call	0xa84	; 0xa84 <__mulsf3>
 6c4:	9b 01       	movw	r18, r22
 6c6:	ac 01       	movw	r20, r24
 6c8:	c7 01       	movw	r24, r14
 6ca:	b6 01       	movw	r22, r12
 6cc:	0e 94 1f 04 	call	0x83e	; 0x83e <__addsf3>
 6d0:	46 2f       	mov	r20, r22
 6d2:	57 2f       	mov	r21, r23
 6d4:	68 2f       	mov	r22, r24
 6d6:	79 2f       	mov	r23, r25
 6d8:	cb 01       	movw	r24, r22
 6da:	ba 01       	movw	r22, r20
 6dc:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
 6e0:	8b 01       	movw	r16, r22
 6e2:	9c 01       	movw	r18, r24
		++i;
 6e4:	08 94       	sec
 6e6:	81 1c       	adc	r8, r1
 6e8:	91 1c       	adc	r9, r1
}

int btod(int n) /* Function to convert binary to decimal.*/
{
	int decimal=0, i=0, rem;
	while (n!=0)
 6ea:	41 14       	cp	r4, r1
 6ec:	51 04       	cpc	r5, r1
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <btod+0xce>
 6f0:	b8 cf       	rjmp	.-144    	; 0x662 <btod+0x3e>
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <btod+0xd4>
 //all peripherals are now initialized
}

int btod(int n) /* Function to convert binary to decimal.*/
{
	int decimal=0, i=0, rem;
 6f4:	00 e0       	ldi	r16, 0x00	; 0
 6f6:	10 e0       	ldi	r17, 0x00	; 0
		n/=10;
		decimal += rem*pow(2,i);
		++i;
	}
	return decimal;
}
 6f8:	80 2f       	mov	r24, r16
 6fa:	91 2f       	mov	r25, r17
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	df 90       	pop	r13
 70a:	cf 90       	pop	r12
 70c:	bf 90       	pop	r11
 70e:	af 90       	pop	r10
 710:	9f 90       	pop	r9
 712:	8f 90       	pop	r8
 714:	7f 90       	pop	r7
 716:	6f 90       	pop	r6
 718:	5f 90       	pop	r5
 71a:	4f 90       	pop	r4
 71c:	3f 90       	pop	r3
 71e:	2f 90       	pop	r2
 720:	08 95       	ret

00000722 <pr_int>:
void pr_int(int a,int b,uint16_t c,int d) /* get negative values*/
{
 722:	ef 92       	push	r14
 724:	ff 92       	push	r15
 726:	0f 93       	push	r16
 728:	1f 93       	push	r17
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
 72e:	c8 2f       	mov	r28, r24
 730:	d6 2f       	mov	r29, r22
 732:	8a 01       	movw	r16, r20
 734:	79 01       	movw	r14, r18
	if (c>34000)
 736:	84 e8       	ldi	r24, 0x84	; 132
 738:	41 3d       	cpi	r20, 0xD1	; 209
 73a:	58 07       	cpc	r21, r24
 73c:	90 f0       	brcs	.+36     	; 0x762 <pr_int+0x40>
	{
		lcd_cursor(a,b);
 73e:	8c 2f       	mov	r24, r28
 740:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
		lcd_string("-");
 744:	89 e0       	ldi	r24, 0x09	; 9
 746:	92 e0       	ldi	r25, 0x02	; 2
 748:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_string>
		c = 65536 -c;
		lcd_print(a,b+1,c,d);
 74c:	6d 2f       	mov	r22, r29
 74e:	6f 5f       	subi	r22, 0xFF	; 255
{
	if (c>34000)
	{
		lcd_cursor(a,b);
		lcd_string("-");
		c = 65536 -c;
 750:	44 27       	eor	r20, r20
 752:	55 27       	eor	r21, r21
 754:	40 1b       	sub	r20, r16
 756:	51 0b       	sbc	r21, r17
		lcd_print(a,b+1,c,d);
 758:	8c 2f       	mov	r24, r28
 75a:	97 01       	movw	r18, r14
 75c:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
 760:	0e c0       	rjmp	.+28     	; 0x77e <pr_int+0x5c>
	} 
	else
	{
		lcd_cursor(a,b);
 762:	8c 2f       	mov	r24, r28
 764:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
		lcd_string("+");
 768:	8b e0       	ldi	r24, 0x0B	; 11
 76a:	92 e0       	ldi	r25, 0x02	; 2
 76c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_string>
		lcd_print(a,b+1,c,d);
 770:	6d 2f       	mov	r22, r29
 772:	6f 5f       	subi	r22, 0xFF	; 255
 774:	8c 2f       	mov	r24, r28
 776:	a8 01       	movw	r20, r16
 778:	97 01       	movw	r18, r14
 77a:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
	}
}
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	1f 91       	pop	r17
 784:	0f 91       	pop	r16
 786:	ff 90       	pop	r15
 788:	ef 90       	pop	r14
 78a:	08 95       	ret

0000078c <main>:
{   
  uint16_t x_byte = 0,y_byte = 0,z_byte = 0;
  uint8_t x_byte1 = 0,x_byte2 = 0,y_byte1 = 0,y_byte2 = 0,z_byte1 = 0,z_byte2 = 0;
  //int accl_angle =0;

 init_devices();
 78c:	0e 94 0b 03 	call	0x616	; 0x616 <init_devices>
 lcd_set_4bit();                // set the LCD in 4 bit mode
 790:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
 lcd_init();                    // initialize the LCD with its commands
 794:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>
 display_clear();               // clear the LCD
 798:	0e 94 38 02 	call	0x470	; 0x470 <display_clear>
 write_byte(0x0F,0x20);
 79c:	8f e0       	ldi	r24, 0x0F	; 15
 79e:	60 e2       	ldi	r22, 0x20	; 32
 7a0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <write_byte>
 
while(1)
{
	   
	   
	  x_byte1 = read_byte(XL);
 7a4:	88 e2       	ldi	r24, 0x28	; 40
 7a6:	0e 94 93 02 	call	0x526	; 0x526 <read_byte>
 7aa:	c8 2f       	mov	r28, r24
	  //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(XH);
 7ac:	89 e2       	ldi	r24, 0x29	; 41
 7ae:	0e 94 93 02 	call	0x526	; 0x526 <read_byte>
 7b2:	d8 2f       	mov	r29, r24
	   //lcd_print(2,1,x_byte2,3);
	   
	   y_byte1 = read_byte(YL);
 7b4:	8a e2       	ldi	r24, 0x2A	; 42
 7b6:	0e 94 93 02 	call	0x526	; 0x526 <read_byte>
 7ba:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(YH);
 7bc:	8b e2       	ldi	r24, 0x2B	; 43
 7be:	0e 94 93 02 	call	0x526	; 0x526 <read_byte>
 7c2:	18 2f       	mov	r17, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(ZL);
 7c4:	8c e2       	ldi	r24, 0x2C	; 44
 7c6:	0e 94 93 02 	call	0x526	; 0x526 <read_byte>
 7ca:	e8 2e       	mov	r14, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(ZH);
 7cc:	8d e2       	ldi	r24, 0x2D	; 45
 7ce:	0e 94 93 02 	call	0x526	; 0x526 <read_byte>
 7d2:	f8 2e       	mov	r15, r24
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	9f e7       	ldi	r25, 0x7F	; 127
 7d8:	a4 e0       	ldi	r26, 0x04	; 4
 7da:	81 50       	subi	r24, 0x01	; 1
 7dc:	90 40       	sbci	r25, 0x00	; 0
 7de:	a0 40       	sbci	r26, 0x00	; 0
 7e0:	e1 f7       	brne	.-8      	; 0x7da <main+0x4e>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <main+0x58>
 7e4:	00 00       	nop
	   //lcd_print(2,10,z_byte2,3);
	   _delay_ms(100);
	   
	   x_byte = x_byte2;   // to print 10 bit integer value on LCD
	   x_byte = (x_byte << 8);
 7e6:	9d 2e       	mov	r9, r29
 7e8:	88 24       	eor	r8, r8
	   x_byte |= x_byte1;
 7ea:	4c 2f       	mov	r20, r28
 7ec:	50 e0       	ldi	r21, 0x00	; 0
 7ee:	48 29       	or	r20, r8
 7f0:	59 29       	or	r21, r9
	   //lcd_print(1,1,x_byte,5);
	   pr_int(1,1,x_byte,5);
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	61 e0       	ldi	r22, 0x01	; 1
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	25 e0       	ldi	r18, 0x05	; 5
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	0e 94 91 03 	call	0x722	; 0x722 <pr_int>
	   
	   y_byte = y_byte2;
	   y_byte = (y_byte << 8);
 802:	b1 2e       	mov	r11, r17
 804:	aa 24       	eor	r10, r10
	   y_byte |= y_byte1;
 806:	40 2f       	mov	r20, r16
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	4a 29       	or	r20, r10
 80c:	5b 29       	or	r21, r11
	   //lcd_print(2,5,y_byte,5);
	   pr_int(2,4,y_byte,5);
 80e:	82 e0       	ldi	r24, 0x02	; 2
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	64 e0       	ldi	r22, 0x04	; 4
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	25 e0       	ldi	r18, 0x05	; 5
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	0e 94 91 03 	call	0x722	; 0x722 <pr_int>
	   
	   z_byte = z_byte2;
	   z_byte = (z_byte << 8);
 81e:	df 2c       	mov	r13, r15
 820:	cc 24       	eor	r12, r12
	   z_byte |= z_byte1;
 822:	4e 2d       	mov	r20, r14
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	4c 29       	or	r20, r12
 828:	5d 29       	or	r21, r13
	   //lcd_print(1,10,z_byte,5);
	   pr_int(1,9,z_byte,5);
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	69 e0       	ldi	r22, 0x09	; 9
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	25 e0       	ldi	r18, 0x05	; 5
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	0e 94 91 03 	call	0x722	; 0x722 <pr_int>
 83a:	b4 cf       	rjmp	.-152    	; 0x7a4 <main+0x18>

0000083c <__subsf3>:
 83c:	50 58       	subi	r21, 0x80	; 128

0000083e <__addsf3>:
 83e:	bb 27       	eor	r27, r27
 840:	aa 27       	eor	r26, r26
 842:	0e d0       	rcall	.+28     	; 0x860 <__addsf3x>
 844:	e5 c0       	rjmp	.+458    	; 0xa10 <__fp_round>
 846:	d6 d0       	rcall	.+428    	; 0x9f4 <__fp_pscA>
 848:	30 f0       	brcs	.+12     	; 0x856 <__addsf3+0x18>
 84a:	db d0       	rcall	.+438    	; 0xa02 <__fp_pscB>
 84c:	20 f0       	brcs	.+8      	; 0x856 <__addsf3+0x18>
 84e:	31 f4       	brne	.+12     	; 0x85c <__addsf3+0x1e>
 850:	9f 3f       	cpi	r25, 0xFF	; 255
 852:	11 f4       	brne	.+4      	; 0x858 <__addsf3+0x1a>
 854:	1e f4       	brtc	.+6      	; 0x85c <__addsf3+0x1e>
 856:	cb c0       	rjmp	.+406    	; 0x9ee <__fp_nan>
 858:	0e f4       	brtc	.+2      	; 0x85c <__addsf3+0x1e>
 85a:	e0 95       	com	r30
 85c:	e7 fb       	bst	r30, 7
 85e:	c1 c0       	rjmp	.+386    	; 0x9e2 <__fp_inf>

00000860 <__addsf3x>:
 860:	e9 2f       	mov	r30, r25
 862:	e7 d0       	rcall	.+462    	; 0xa32 <__fp_split3>
 864:	80 f3       	brcs	.-32     	; 0x846 <__addsf3+0x8>
 866:	ba 17       	cp	r27, r26
 868:	62 07       	cpc	r22, r18
 86a:	73 07       	cpc	r23, r19
 86c:	84 07       	cpc	r24, r20
 86e:	95 07       	cpc	r25, r21
 870:	18 f0       	brcs	.+6      	; 0x878 <__addsf3x+0x18>
 872:	71 f4       	brne	.+28     	; 0x890 <__addsf3x+0x30>
 874:	9e f5       	brtc	.+102    	; 0x8dc <__addsf3x+0x7c>
 876:	ff c0       	rjmp	.+510    	; 0xa76 <__fp_zero>
 878:	0e f4       	brtc	.+2      	; 0x87c <__addsf3x+0x1c>
 87a:	e0 95       	com	r30
 87c:	0b 2e       	mov	r0, r27
 87e:	ba 2f       	mov	r27, r26
 880:	a0 2d       	mov	r26, r0
 882:	0b 01       	movw	r0, r22
 884:	b9 01       	movw	r22, r18
 886:	90 01       	movw	r18, r0
 888:	0c 01       	movw	r0, r24
 88a:	ca 01       	movw	r24, r20
 88c:	a0 01       	movw	r20, r0
 88e:	11 24       	eor	r1, r1
 890:	ff 27       	eor	r31, r31
 892:	59 1b       	sub	r21, r25
 894:	99 f0       	breq	.+38     	; 0x8bc <__addsf3x+0x5c>
 896:	59 3f       	cpi	r21, 0xF9	; 249
 898:	50 f4       	brcc	.+20     	; 0x8ae <__addsf3x+0x4e>
 89a:	50 3e       	cpi	r21, 0xE0	; 224
 89c:	68 f1       	brcs	.+90     	; 0x8f8 <__addsf3x+0x98>
 89e:	1a 16       	cp	r1, r26
 8a0:	f0 40       	sbci	r31, 0x00	; 0
 8a2:	a2 2f       	mov	r26, r18
 8a4:	23 2f       	mov	r18, r19
 8a6:	34 2f       	mov	r19, r20
 8a8:	44 27       	eor	r20, r20
 8aa:	58 5f       	subi	r21, 0xF8	; 248
 8ac:	f3 cf       	rjmp	.-26     	; 0x894 <__addsf3x+0x34>
 8ae:	46 95       	lsr	r20
 8b0:	37 95       	ror	r19
 8b2:	27 95       	ror	r18
 8b4:	a7 95       	ror	r26
 8b6:	f0 40       	sbci	r31, 0x00	; 0
 8b8:	53 95       	inc	r21
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <__addsf3x+0x4e>
 8bc:	7e f4       	brtc	.+30     	; 0x8dc <__addsf3x+0x7c>
 8be:	1f 16       	cp	r1, r31
 8c0:	ba 0b       	sbc	r27, r26
 8c2:	62 0b       	sbc	r22, r18
 8c4:	73 0b       	sbc	r23, r19
 8c6:	84 0b       	sbc	r24, r20
 8c8:	ba f0       	brmi	.+46     	; 0x8f8 <__addsf3x+0x98>
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	a1 f0       	breq	.+40     	; 0x8f6 <__addsf3x+0x96>
 8ce:	ff 0f       	add	r31, r31
 8d0:	bb 1f       	adc	r27, r27
 8d2:	66 1f       	adc	r22, r22
 8d4:	77 1f       	adc	r23, r23
 8d6:	88 1f       	adc	r24, r24
 8d8:	c2 f7       	brpl	.-16     	; 0x8ca <__addsf3x+0x6a>
 8da:	0e c0       	rjmp	.+28     	; 0x8f8 <__addsf3x+0x98>
 8dc:	ba 0f       	add	r27, r26
 8de:	62 1f       	adc	r22, r18
 8e0:	73 1f       	adc	r23, r19
 8e2:	84 1f       	adc	r24, r20
 8e4:	48 f4       	brcc	.+18     	; 0x8f8 <__addsf3x+0x98>
 8e6:	87 95       	ror	r24
 8e8:	77 95       	ror	r23
 8ea:	67 95       	ror	r22
 8ec:	b7 95       	ror	r27
 8ee:	f7 95       	ror	r31
 8f0:	9e 3f       	cpi	r25, 0xFE	; 254
 8f2:	08 f0       	brcs	.+2      	; 0x8f6 <__addsf3x+0x96>
 8f4:	b3 cf       	rjmp	.-154    	; 0x85c <__addsf3+0x1e>
 8f6:	93 95       	inc	r25
 8f8:	88 0f       	add	r24, r24
 8fa:	08 f0       	brcs	.+2      	; 0x8fe <__addsf3x+0x9e>
 8fc:	99 27       	eor	r25, r25
 8fe:	ee 0f       	add	r30, r30
 900:	97 95       	ror	r25
 902:	87 95       	ror	r24
 904:	08 95       	ret

00000906 <__fixsfsi>:
 906:	04 d0       	rcall	.+8      	; 0x910 <__fixunssfsi>
 908:	68 94       	set
 90a:	b1 11       	cpse	r27, r1
 90c:	b5 c0       	rjmp	.+362    	; 0xa78 <__fp_szero>
 90e:	08 95       	ret

00000910 <__fixunssfsi>:
 910:	98 d0       	rcall	.+304    	; 0xa42 <__fp_splitA>
 912:	88 f0       	brcs	.+34     	; 0x936 <__fixunssfsi+0x26>
 914:	9f 57       	subi	r25, 0x7F	; 127
 916:	90 f0       	brcs	.+36     	; 0x93c <__fixunssfsi+0x2c>
 918:	b9 2f       	mov	r27, r25
 91a:	99 27       	eor	r25, r25
 91c:	b7 51       	subi	r27, 0x17	; 23
 91e:	a0 f0       	brcs	.+40     	; 0x948 <__fixunssfsi+0x38>
 920:	d1 f0       	breq	.+52     	; 0x956 <__fixunssfsi+0x46>
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	1a f0       	brmi	.+6      	; 0x932 <__fixunssfsi+0x22>
 92c:	ba 95       	dec	r27
 92e:	c9 f7       	brne	.-14     	; 0x922 <__fixunssfsi+0x12>
 930:	12 c0       	rjmp	.+36     	; 0x956 <__fixunssfsi+0x46>
 932:	b1 30       	cpi	r27, 0x01	; 1
 934:	81 f0       	breq	.+32     	; 0x956 <__fixunssfsi+0x46>
 936:	9f d0       	rcall	.+318    	; 0xa76 <__fp_zero>
 938:	b1 e0       	ldi	r27, 0x01	; 1
 93a:	08 95       	ret
 93c:	9c c0       	rjmp	.+312    	; 0xa76 <__fp_zero>
 93e:	67 2f       	mov	r22, r23
 940:	78 2f       	mov	r23, r24
 942:	88 27       	eor	r24, r24
 944:	b8 5f       	subi	r27, 0xF8	; 248
 946:	39 f0       	breq	.+14     	; 0x956 <__fixunssfsi+0x46>
 948:	b9 3f       	cpi	r27, 0xF9	; 249
 94a:	cc f3       	brlt	.-14     	; 0x93e <__fixunssfsi+0x2e>
 94c:	86 95       	lsr	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b3 95       	inc	r27
 954:	d9 f7       	brne	.-10     	; 0x94c <__fixunssfsi+0x3c>
 956:	3e f4       	brtc	.+14     	; 0x966 <__fixunssfsi+0x56>
 958:	90 95       	com	r25
 95a:	80 95       	com	r24
 95c:	70 95       	com	r23
 95e:	61 95       	neg	r22
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <__floatunsisf>:
 968:	e8 94       	clt
 96a:	09 c0       	rjmp	.+18     	; 0x97e <__floatsisf+0x12>

0000096c <__floatsisf>:
 96c:	97 fb       	bst	r25, 7
 96e:	3e f4       	brtc	.+14     	; 0x97e <__floatsisf+0x12>
 970:	90 95       	com	r25
 972:	80 95       	com	r24
 974:	70 95       	com	r23
 976:	61 95       	neg	r22
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	99 23       	and	r25, r25
 980:	a9 f0       	breq	.+42     	; 0x9ac <__floatsisf+0x40>
 982:	f9 2f       	mov	r31, r25
 984:	96 e9       	ldi	r25, 0x96	; 150
 986:	bb 27       	eor	r27, r27
 988:	93 95       	inc	r25
 98a:	f6 95       	lsr	r31
 98c:	87 95       	ror	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b7 95       	ror	r27
 994:	f1 11       	cpse	r31, r1
 996:	f8 cf       	rjmp	.-16     	; 0x988 <__floatsisf+0x1c>
 998:	fa f4       	brpl	.+62     	; 0x9d8 <__floatsisf+0x6c>
 99a:	bb 0f       	add	r27, r27
 99c:	11 f4       	brne	.+4      	; 0x9a2 <__floatsisf+0x36>
 99e:	60 ff       	sbrs	r22, 0
 9a0:	1b c0       	rjmp	.+54     	; 0x9d8 <__floatsisf+0x6c>
 9a2:	6f 5f       	subi	r22, 0xFF	; 255
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	8f 4f       	sbci	r24, 0xFF	; 255
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	16 c0       	rjmp	.+44     	; 0x9d8 <__floatsisf+0x6c>
 9ac:	88 23       	and	r24, r24
 9ae:	11 f0       	breq	.+4      	; 0x9b4 <__floatsisf+0x48>
 9b0:	96 e9       	ldi	r25, 0x96	; 150
 9b2:	11 c0       	rjmp	.+34     	; 0x9d6 <__floatsisf+0x6a>
 9b4:	77 23       	and	r23, r23
 9b6:	21 f0       	breq	.+8      	; 0x9c0 <__floatsisf+0x54>
 9b8:	9e e8       	ldi	r25, 0x8E	; 142
 9ba:	87 2f       	mov	r24, r23
 9bc:	76 2f       	mov	r23, r22
 9be:	05 c0       	rjmp	.+10     	; 0x9ca <__floatsisf+0x5e>
 9c0:	66 23       	and	r22, r22
 9c2:	71 f0       	breq	.+28     	; 0x9e0 <__floatsisf+0x74>
 9c4:	96 e8       	ldi	r25, 0x86	; 134
 9c6:	86 2f       	mov	r24, r22
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	2a f0       	brmi	.+10     	; 0x9d8 <__floatsisf+0x6c>
 9ce:	9a 95       	dec	r25
 9d0:	66 0f       	add	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	da f7       	brpl	.-10     	; 0x9ce <__floatsisf+0x62>
 9d8:	88 0f       	add	r24, r24
 9da:	96 95       	lsr	r25
 9dc:	87 95       	ror	r24
 9de:	97 f9       	bld	r25, 7
 9e0:	08 95       	ret

000009e2 <__fp_inf>:
 9e2:	97 f9       	bld	r25, 7
 9e4:	9f 67       	ori	r25, 0x7F	; 127
 9e6:	80 e8       	ldi	r24, 0x80	; 128
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	60 e0       	ldi	r22, 0x00	; 0
 9ec:	08 95       	ret

000009ee <__fp_nan>:
 9ee:	9f ef       	ldi	r25, 0xFF	; 255
 9f0:	80 ec       	ldi	r24, 0xC0	; 192
 9f2:	08 95       	ret

000009f4 <__fp_pscA>:
 9f4:	00 24       	eor	r0, r0
 9f6:	0a 94       	dec	r0
 9f8:	16 16       	cp	r1, r22
 9fa:	17 06       	cpc	r1, r23
 9fc:	18 06       	cpc	r1, r24
 9fe:	09 06       	cpc	r0, r25
 a00:	08 95       	ret

00000a02 <__fp_pscB>:
 a02:	00 24       	eor	r0, r0
 a04:	0a 94       	dec	r0
 a06:	12 16       	cp	r1, r18
 a08:	13 06       	cpc	r1, r19
 a0a:	14 06       	cpc	r1, r20
 a0c:	05 06       	cpc	r0, r21
 a0e:	08 95       	ret

00000a10 <__fp_round>:
 a10:	09 2e       	mov	r0, r25
 a12:	03 94       	inc	r0
 a14:	00 0c       	add	r0, r0
 a16:	11 f4       	brne	.+4      	; 0xa1c <__fp_round+0xc>
 a18:	88 23       	and	r24, r24
 a1a:	52 f0       	brmi	.+20     	; 0xa30 <__fp_round+0x20>
 a1c:	bb 0f       	add	r27, r27
 a1e:	40 f4       	brcc	.+16     	; 0xa30 <__fp_round+0x20>
 a20:	bf 2b       	or	r27, r31
 a22:	11 f4       	brne	.+4      	; 0xa28 <__fp_round+0x18>
 a24:	60 ff       	sbrs	r22, 0
 a26:	04 c0       	rjmp	.+8      	; 0xa30 <__fp_round+0x20>
 a28:	6f 5f       	subi	r22, 0xFF	; 255
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	8f 4f       	sbci	r24, 0xFF	; 255
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	08 95       	ret

00000a32 <__fp_split3>:
 a32:	57 fd       	sbrc	r21, 7
 a34:	90 58       	subi	r25, 0x80	; 128
 a36:	44 0f       	add	r20, r20
 a38:	55 1f       	adc	r21, r21
 a3a:	59 f0       	breq	.+22     	; 0xa52 <__fp_splitA+0x10>
 a3c:	5f 3f       	cpi	r21, 0xFF	; 255
 a3e:	71 f0       	breq	.+28     	; 0xa5c <__fp_splitA+0x1a>
 a40:	47 95       	ror	r20

00000a42 <__fp_splitA>:
 a42:	88 0f       	add	r24, r24
 a44:	97 fb       	bst	r25, 7
 a46:	99 1f       	adc	r25, r25
 a48:	61 f0       	breq	.+24     	; 0xa62 <__fp_splitA+0x20>
 a4a:	9f 3f       	cpi	r25, 0xFF	; 255
 a4c:	79 f0       	breq	.+30     	; 0xa6c <__fp_splitA+0x2a>
 a4e:	87 95       	ror	r24
 a50:	08 95       	ret
 a52:	12 16       	cp	r1, r18
 a54:	13 06       	cpc	r1, r19
 a56:	14 06       	cpc	r1, r20
 a58:	55 1f       	adc	r21, r21
 a5a:	f2 cf       	rjmp	.-28     	; 0xa40 <__fp_split3+0xe>
 a5c:	46 95       	lsr	r20
 a5e:	f1 df       	rcall	.-30     	; 0xa42 <__fp_splitA>
 a60:	08 c0       	rjmp	.+16     	; 0xa72 <__fp_splitA+0x30>
 a62:	16 16       	cp	r1, r22
 a64:	17 06       	cpc	r1, r23
 a66:	18 06       	cpc	r1, r24
 a68:	99 1f       	adc	r25, r25
 a6a:	f1 cf       	rjmp	.-30     	; 0xa4e <__fp_splitA+0xc>
 a6c:	86 95       	lsr	r24
 a6e:	71 05       	cpc	r23, r1
 a70:	61 05       	cpc	r22, r1
 a72:	08 94       	sec
 a74:	08 95       	ret

00000a76 <__fp_zero>:
 a76:	e8 94       	clt

00000a78 <__fp_szero>:
 a78:	bb 27       	eor	r27, r27
 a7a:	66 27       	eor	r22, r22
 a7c:	77 27       	eor	r23, r23
 a7e:	cb 01       	movw	r24, r22
 a80:	97 f9       	bld	r25, 7
 a82:	08 95       	ret

00000a84 <__mulsf3>:
 a84:	0b d0       	rcall	.+22     	; 0xa9c <__mulsf3x>
 a86:	c4 cf       	rjmp	.-120    	; 0xa10 <__fp_round>
 a88:	b5 df       	rcall	.-150    	; 0x9f4 <__fp_pscA>
 a8a:	28 f0       	brcs	.+10     	; 0xa96 <__mulsf3+0x12>
 a8c:	ba df       	rcall	.-140    	; 0xa02 <__fp_pscB>
 a8e:	18 f0       	brcs	.+6      	; 0xa96 <__mulsf3+0x12>
 a90:	95 23       	and	r25, r21
 a92:	09 f0       	breq	.+2      	; 0xa96 <__mulsf3+0x12>
 a94:	a6 cf       	rjmp	.-180    	; 0x9e2 <__fp_inf>
 a96:	ab cf       	rjmp	.-170    	; 0x9ee <__fp_nan>
 a98:	11 24       	eor	r1, r1
 a9a:	ee cf       	rjmp	.-36     	; 0xa78 <__fp_szero>

00000a9c <__mulsf3x>:
 a9c:	ca df       	rcall	.-108    	; 0xa32 <__fp_split3>
 a9e:	a0 f3       	brcs	.-24     	; 0xa88 <__mulsf3+0x4>

00000aa0 <__mulsf3_pse>:
 aa0:	95 9f       	mul	r25, r21
 aa2:	d1 f3       	breq	.-12     	; 0xa98 <__mulsf3+0x14>
 aa4:	95 0f       	add	r25, r21
 aa6:	50 e0       	ldi	r21, 0x00	; 0
 aa8:	55 1f       	adc	r21, r21
 aaa:	62 9f       	mul	r22, r18
 aac:	f0 01       	movw	r30, r0
 aae:	72 9f       	mul	r23, r18
 ab0:	bb 27       	eor	r27, r27
 ab2:	f0 0d       	add	r31, r0
 ab4:	b1 1d       	adc	r27, r1
 ab6:	63 9f       	mul	r22, r19
 ab8:	aa 27       	eor	r26, r26
 aba:	f0 0d       	add	r31, r0
 abc:	b1 1d       	adc	r27, r1
 abe:	aa 1f       	adc	r26, r26
 ac0:	64 9f       	mul	r22, r20
 ac2:	66 27       	eor	r22, r22
 ac4:	b0 0d       	add	r27, r0
 ac6:	a1 1d       	adc	r26, r1
 ac8:	66 1f       	adc	r22, r22
 aca:	82 9f       	mul	r24, r18
 acc:	22 27       	eor	r18, r18
 ace:	b0 0d       	add	r27, r0
 ad0:	a1 1d       	adc	r26, r1
 ad2:	62 1f       	adc	r22, r18
 ad4:	73 9f       	mul	r23, r19
 ad6:	b0 0d       	add	r27, r0
 ad8:	a1 1d       	adc	r26, r1
 ada:	62 1f       	adc	r22, r18
 adc:	83 9f       	mul	r24, r19
 ade:	a0 0d       	add	r26, r0
 ae0:	61 1d       	adc	r22, r1
 ae2:	22 1f       	adc	r18, r18
 ae4:	74 9f       	mul	r23, r20
 ae6:	33 27       	eor	r19, r19
 ae8:	a0 0d       	add	r26, r0
 aea:	61 1d       	adc	r22, r1
 aec:	23 1f       	adc	r18, r19
 aee:	84 9f       	mul	r24, r20
 af0:	60 0d       	add	r22, r0
 af2:	21 1d       	adc	r18, r1
 af4:	82 2f       	mov	r24, r18
 af6:	76 2f       	mov	r23, r22
 af8:	6a 2f       	mov	r22, r26
 afa:	11 24       	eor	r1, r1
 afc:	9f 57       	subi	r25, 0x7F	; 127
 afe:	50 40       	sbci	r21, 0x00	; 0
 b00:	8a f0       	brmi	.+34     	; 0xb24 <__mulsf3_pse+0x84>
 b02:	e1 f0       	breq	.+56     	; 0xb3c <__mulsf3_pse+0x9c>
 b04:	88 23       	and	r24, r24
 b06:	4a f0       	brmi	.+18     	; 0xb1a <__mulsf3_pse+0x7a>
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	bb 1f       	adc	r27, r27
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	91 50       	subi	r25, 0x01	; 1
 b16:	50 40       	sbci	r21, 0x00	; 0
 b18:	a9 f7       	brne	.-22     	; 0xb04 <__mulsf3_pse+0x64>
 b1a:	9e 3f       	cpi	r25, 0xFE	; 254
 b1c:	51 05       	cpc	r21, r1
 b1e:	70 f0       	brcs	.+28     	; 0xb3c <__mulsf3_pse+0x9c>
 b20:	60 cf       	rjmp	.-320    	; 0x9e2 <__fp_inf>
 b22:	aa cf       	rjmp	.-172    	; 0xa78 <__fp_szero>
 b24:	5f 3f       	cpi	r21, 0xFF	; 255
 b26:	ec f3       	brlt	.-6      	; 0xb22 <__mulsf3_pse+0x82>
 b28:	98 3e       	cpi	r25, 0xE8	; 232
 b2a:	dc f3       	brlt	.-10     	; 0xb22 <__mulsf3_pse+0x82>
 b2c:	86 95       	lsr	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	b7 95       	ror	r27
 b34:	f7 95       	ror	r31
 b36:	e7 95       	ror	r30
 b38:	9f 5f       	subi	r25, 0xFF	; 255
 b3a:	c1 f7       	brne	.-16     	; 0xb2c <__mulsf3_pse+0x8c>
 b3c:	fe 2b       	or	r31, r30
 b3e:	88 0f       	add	r24, r24
 b40:	91 1d       	adc	r25, r1
 b42:	96 95       	lsr	r25
 b44:	87 95       	ror	r24
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret

00000b4a <pow>:
 b4a:	fa 01       	movw	r30, r20
 b4c:	ee 0f       	add	r30, r30
 b4e:	ff 1f       	adc	r31, r31
 b50:	30 96       	adiw	r30, 0x00	; 0
 b52:	21 05       	cpc	r18, r1
 b54:	31 05       	cpc	r19, r1
 b56:	99 f1       	breq	.+102    	; 0xbbe <pow+0x74>
 b58:	61 15       	cp	r22, r1
 b5a:	71 05       	cpc	r23, r1
 b5c:	61 f4       	brne	.+24     	; 0xb76 <pow+0x2c>
 b5e:	80 38       	cpi	r24, 0x80	; 128
 b60:	bf e3       	ldi	r27, 0x3F	; 63
 b62:	9b 07       	cpc	r25, r27
 b64:	49 f1       	breq	.+82     	; 0xbb8 <pow+0x6e>
 b66:	68 94       	set
 b68:	90 38       	cpi	r25, 0x80	; 128
 b6a:	81 05       	cpc	r24, r1
 b6c:	61 f0       	breq	.+24     	; 0xb86 <pow+0x3c>
 b6e:	80 38       	cpi	r24, 0x80	; 128
 b70:	bf ef       	ldi	r27, 0xFF	; 255
 b72:	9b 07       	cpc	r25, r27
 b74:	41 f0       	breq	.+16     	; 0xb86 <pow+0x3c>
 b76:	99 23       	and	r25, r25
 b78:	42 f5       	brpl	.+80     	; 0xbca <pow+0x80>
 b7a:	ff 3f       	cpi	r31, 0xFF	; 255
 b7c:	e1 05       	cpc	r30, r1
 b7e:	31 05       	cpc	r19, r1
 b80:	21 05       	cpc	r18, r1
 b82:	11 f1       	breq	.+68     	; 0xbc8 <pow+0x7e>
 b84:	e8 94       	clt
 b86:	08 94       	sec
 b88:	e7 95       	ror	r30
 b8a:	d9 01       	movw	r26, r18
 b8c:	aa 23       	and	r26, r26
 b8e:	29 f4       	brne	.+10     	; 0xb9a <pow+0x50>
 b90:	ab 2f       	mov	r26, r27
 b92:	be 2f       	mov	r27, r30
 b94:	f8 5f       	subi	r31, 0xF8	; 248
 b96:	d0 f3       	brcs	.-12     	; 0xb8c <pow+0x42>
 b98:	10 c0       	rjmp	.+32     	; 0xbba <pow+0x70>
 b9a:	ff 5f       	subi	r31, 0xFF	; 255
 b9c:	70 f4       	brcc	.+28     	; 0xbba <pow+0x70>
 b9e:	a6 95       	lsr	r26
 ba0:	e0 f7       	brcc	.-8      	; 0xb9a <pow+0x50>
 ba2:	f7 39       	cpi	r31, 0x97	; 151
 ba4:	50 f0       	brcs	.+20     	; 0xbba <pow+0x70>
 ba6:	19 f0       	breq	.+6      	; 0xbae <pow+0x64>
 ba8:	ff 3a       	cpi	r31, 0xAF	; 175
 baa:	38 f4       	brcc	.+14     	; 0xbba <pow+0x70>
 bac:	9f 77       	andi	r25, 0x7F	; 127
 bae:	9f 93       	push	r25
 bb0:	0c d0       	rcall	.+24     	; 0xbca <pow+0x80>
 bb2:	0f 90       	pop	r0
 bb4:	07 fc       	sbrc	r0, 7
 bb6:	90 58       	subi	r25, 0x80	; 128
 bb8:	08 95       	ret
 bba:	3e f0       	brts	.+14     	; 0xbca <pow+0x80>
 bbc:	18 cf       	rjmp	.-464    	; 0x9ee <__fp_nan>
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	80 e8       	ldi	r24, 0x80	; 128
 bc4:	9f e3       	ldi	r25, 0x3F	; 63
 bc6:	08 95       	ret
 bc8:	4f e7       	ldi	r20, 0x7F	; 127
 bca:	9f 77       	andi	r25, 0x7F	; 127
 bcc:	5f 93       	push	r21
 bce:	4f 93       	push	r20
 bd0:	3f 93       	push	r19
 bd2:	2f 93       	push	r18
 bd4:	9e d0       	rcall	.+316    	; 0xd12 <log>
 bd6:	2f 91       	pop	r18
 bd8:	3f 91       	pop	r19
 bda:	4f 91       	pop	r20
 bdc:	5f 91       	pop	r21
 bde:	52 df       	rcall	.-348    	; 0xa84 <__mulsf3>
 be0:	05 c0       	rjmp	.+10     	; 0xbec <exp>
 be2:	19 f4       	brne	.+6      	; 0xbea <pow+0xa0>
 be4:	0e f0       	brts	.+2      	; 0xbe8 <pow+0x9e>
 be6:	fd ce       	rjmp	.-518    	; 0x9e2 <__fp_inf>
 be8:	46 cf       	rjmp	.-372    	; 0xa76 <__fp_zero>
 bea:	01 cf       	rjmp	.-510    	; 0x9ee <__fp_nan>

00000bec <exp>:
 bec:	2a df       	rcall	.-428    	; 0xa42 <__fp_splitA>
 bee:	c8 f3       	brcs	.-14     	; 0xbe2 <pow+0x98>
 bf0:	96 38       	cpi	r25, 0x86	; 134
 bf2:	c0 f7       	brcc	.-16     	; 0xbe4 <pow+0x9a>
 bf4:	07 f8       	bld	r0, 7
 bf6:	0f 92       	push	r0
 bf8:	e8 94       	clt
 bfa:	2b e3       	ldi	r18, 0x3B	; 59
 bfc:	3a ea       	ldi	r19, 0xAA	; 170
 bfe:	48 eb       	ldi	r20, 0xB8	; 184
 c00:	5f e7       	ldi	r21, 0x7F	; 127
 c02:	4e df       	rcall	.-356    	; 0xaa0 <__mulsf3_pse>
 c04:	0f 92       	push	r0
 c06:	0f 92       	push	r0
 c08:	0f 92       	push	r0
 c0a:	4d b7       	in	r20, 0x3d	; 61
 c0c:	5e b7       	in	r21, 0x3e	; 62
 c0e:	0f 92       	push	r0
 c10:	c0 d0       	rcall	.+384    	; 0xd92 <modf>
 c12:	e4 ee       	ldi	r30, 0xE4	; 228
 c14:	f0 e0       	ldi	r31, 0x00	; 0
 c16:	16 d0       	rcall	.+44     	; 0xc44 <__fp_powser>
 c18:	4f 91       	pop	r20
 c1a:	5f 91       	pop	r21
 c1c:	ef 91       	pop	r30
 c1e:	ff 91       	pop	r31
 c20:	e5 95       	asr	r30
 c22:	ee 1f       	adc	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	49 f0       	breq	.+18     	; 0xc3a <exp+0x4e>
 c28:	fe 57       	subi	r31, 0x7E	; 126
 c2a:	e0 68       	ori	r30, 0x80	; 128
 c2c:	44 27       	eor	r20, r20
 c2e:	ee 0f       	add	r30, r30
 c30:	44 1f       	adc	r20, r20
 c32:	fa 95       	dec	r31
 c34:	e1 f7       	brne	.-8      	; 0xc2e <exp+0x42>
 c36:	41 95       	neg	r20
 c38:	55 0b       	sbc	r21, r21
 c3a:	32 d0       	rcall	.+100    	; 0xca0 <ldexp>
 c3c:	0f 90       	pop	r0
 c3e:	07 fe       	sbrs	r0, 7
 c40:	26 c0       	rjmp	.+76     	; 0xc8e <inverse>
 c42:	08 95       	ret

00000c44 <__fp_powser>:
 c44:	df 93       	push	r29
 c46:	cf 93       	push	r28
 c48:	1f 93       	push	r17
 c4a:	0f 93       	push	r16
 c4c:	ff 92       	push	r15
 c4e:	ef 92       	push	r14
 c50:	df 92       	push	r13
 c52:	7b 01       	movw	r14, r22
 c54:	8c 01       	movw	r16, r24
 c56:	68 94       	set
 c58:	05 c0       	rjmp	.+10     	; 0xc64 <__fp_powser+0x20>
 c5a:	da 2e       	mov	r13, r26
 c5c:	ef 01       	movw	r28, r30
 c5e:	1e df       	rcall	.-452    	; 0xa9c <__mulsf3x>
 c60:	fe 01       	movw	r30, r28
 c62:	e8 94       	clt
 c64:	a5 91       	lpm	r26, Z+
 c66:	25 91       	lpm	r18, Z+
 c68:	35 91       	lpm	r19, Z+
 c6a:	45 91       	lpm	r20, Z+
 c6c:	55 91       	lpm	r21, Z+
 c6e:	ae f3       	brts	.-22     	; 0xc5a <__fp_powser+0x16>
 c70:	ef 01       	movw	r28, r30
 c72:	f6 dd       	rcall	.-1044   	; 0x860 <__addsf3x>
 c74:	fe 01       	movw	r30, r28
 c76:	97 01       	movw	r18, r14
 c78:	a8 01       	movw	r20, r16
 c7a:	da 94       	dec	r13
 c7c:	79 f7       	brne	.-34     	; 0xc5c <__fp_powser+0x18>
 c7e:	df 90       	pop	r13
 c80:	ef 90       	pop	r14
 c82:	ff 90       	pop	r15
 c84:	0f 91       	pop	r16
 c86:	1f 91       	pop	r17
 c88:	cf 91       	pop	r28
 c8a:	df 91       	pop	r29
 c8c:	08 95       	ret

00000c8e <inverse>:
 c8e:	9b 01       	movw	r18, r22
 c90:	ac 01       	movw	r20, r24
 c92:	60 e0       	ldi	r22, 0x00	; 0
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	80 e8       	ldi	r24, 0x80	; 128
 c98:	9f e3       	ldi	r25, 0x3F	; 63
 c9a:	ae c0       	rjmp	.+348    	; 0xdf8 <__divsf3>
 c9c:	a2 ce       	rjmp	.-700    	; 0x9e2 <__fp_inf>
 c9e:	14 c1       	rjmp	.+552    	; 0xec8 <__fp_mpack>

00000ca0 <ldexp>:
 ca0:	d0 de       	rcall	.-608    	; 0xa42 <__fp_splitA>
 ca2:	e8 f3       	brcs	.-6      	; 0xc9e <inverse+0x10>
 ca4:	99 23       	and	r25, r25
 ca6:	d9 f3       	breq	.-10     	; 0xc9e <inverse+0x10>
 ca8:	94 0f       	add	r25, r20
 caa:	51 1d       	adc	r21, r1
 cac:	bb f3       	brvs	.-18     	; 0xc9c <inverse+0xe>
 cae:	91 50       	subi	r25, 0x01	; 1
 cb0:	50 40       	sbci	r21, 0x00	; 0
 cb2:	94 f0       	brlt	.+36     	; 0xcd8 <ldexp+0x38>
 cb4:	59 f0       	breq	.+22     	; 0xccc <ldexp+0x2c>
 cb6:	88 23       	and	r24, r24
 cb8:	32 f0       	brmi	.+12     	; 0xcc6 <ldexp+0x26>
 cba:	66 0f       	add	r22, r22
 cbc:	77 1f       	adc	r23, r23
 cbe:	88 1f       	adc	r24, r24
 cc0:	91 50       	subi	r25, 0x01	; 1
 cc2:	50 40       	sbci	r21, 0x00	; 0
 cc4:	c1 f7       	brne	.-16     	; 0xcb6 <ldexp+0x16>
 cc6:	9e 3f       	cpi	r25, 0xFE	; 254
 cc8:	51 05       	cpc	r21, r1
 cca:	44 f7       	brge	.-48     	; 0xc9c <inverse+0xe>
 ccc:	88 0f       	add	r24, r24
 cce:	91 1d       	adc	r25, r1
 cd0:	96 95       	lsr	r25
 cd2:	87 95       	ror	r24
 cd4:	97 f9       	bld	r25, 7
 cd6:	08 95       	ret
 cd8:	5f 3f       	cpi	r21, 0xFF	; 255
 cda:	ac f0       	brlt	.+42     	; 0xd06 <ldexp+0x66>
 cdc:	98 3e       	cpi	r25, 0xE8	; 232
 cde:	9c f0       	brlt	.+38     	; 0xd06 <ldexp+0x66>
 ce0:	bb 27       	eor	r27, r27
 ce2:	86 95       	lsr	r24
 ce4:	77 95       	ror	r23
 ce6:	67 95       	ror	r22
 ce8:	b7 95       	ror	r27
 cea:	08 f4       	brcc	.+2      	; 0xcee <ldexp+0x4e>
 cec:	b1 60       	ori	r27, 0x01	; 1
 cee:	93 95       	inc	r25
 cf0:	c1 f7       	brne	.-16     	; 0xce2 <ldexp+0x42>
 cf2:	bb 0f       	add	r27, r27
 cf4:	58 f7       	brcc	.-42     	; 0xccc <ldexp+0x2c>
 cf6:	11 f4       	brne	.+4      	; 0xcfc <ldexp+0x5c>
 cf8:	60 ff       	sbrs	r22, 0
 cfa:	e8 cf       	rjmp	.-48     	; 0xccc <ldexp+0x2c>
 cfc:	6f 5f       	subi	r22, 0xFF	; 255
 cfe:	7f 4f       	sbci	r23, 0xFF	; 255
 d00:	8f 4f       	sbci	r24, 0xFF	; 255
 d02:	9f 4f       	sbci	r25, 0xFF	; 255
 d04:	e3 cf       	rjmp	.-58     	; 0xccc <ldexp+0x2c>
 d06:	b8 ce       	rjmp	.-656    	; 0xa78 <__fp_szero>
 d08:	0e f0       	brts	.+2      	; 0xd0c <ldexp+0x6c>
 d0a:	de c0       	rjmp	.+444    	; 0xec8 <__fp_mpack>
 d0c:	70 ce       	rjmp	.-800    	; 0x9ee <__fp_nan>
 d0e:	68 94       	set
 d10:	68 ce       	rjmp	.-816    	; 0x9e2 <__fp_inf>

00000d12 <log>:
 d12:	97 de       	rcall	.-722    	; 0xa42 <__fp_splitA>
 d14:	c8 f3       	brcs	.-14     	; 0xd08 <ldexp+0x68>
 d16:	99 23       	and	r25, r25
 d18:	d1 f3       	breq	.-12     	; 0xd0e <ldexp+0x6e>
 d1a:	c6 f3       	brts	.-16     	; 0xd0c <ldexp+0x6c>
 d1c:	df 93       	push	r29
 d1e:	cf 93       	push	r28
 d20:	1f 93       	push	r17
 d22:	0f 93       	push	r16
 d24:	ff 92       	push	r15
 d26:	c9 2f       	mov	r28, r25
 d28:	dd 27       	eor	r29, r29
 d2a:	88 23       	and	r24, r24
 d2c:	2a f0       	brmi	.+10     	; 0xd38 <log+0x26>
 d2e:	21 97       	sbiw	r28, 0x01	; 1
 d30:	66 0f       	add	r22, r22
 d32:	77 1f       	adc	r23, r23
 d34:	88 1f       	adc	r24, r24
 d36:	da f7       	brpl	.-10     	; 0xd2e <log+0x1c>
 d38:	20 e0       	ldi	r18, 0x00	; 0
 d3a:	30 e0       	ldi	r19, 0x00	; 0
 d3c:	40 e8       	ldi	r20, 0x80	; 128
 d3e:	5f eb       	ldi	r21, 0xBF	; 191
 d40:	9f e3       	ldi	r25, 0x3F	; 63
 d42:	88 39       	cpi	r24, 0x98	; 152
 d44:	20 f0       	brcs	.+8      	; 0xd4e <log+0x3c>
 d46:	80 3e       	cpi	r24, 0xE0	; 224
 d48:	30 f0       	brcs	.+12     	; 0xd56 <log+0x44>
 d4a:	21 96       	adiw	r28, 0x01	; 1
 d4c:	8f 77       	andi	r24, 0x7F	; 127
 d4e:	77 dd       	rcall	.-1298   	; 0x83e <__addsf3>
 d50:	ec e0       	ldi	r30, 0x0C	; 12
 d52:	f1 e0       	ldi	r31, 0x01	; 1
 d54:	03 c0       	rjmp	.+6      	; 0xd5c <log+0x4a>
 d56:	73 dd       	rcall	.-1306   	; 0x83e <__addsf3>
 d58:	e9 e3       	ldi	r30, 0x39	; 57
 d5a:	f1 e0       	ldi	r31, 0x01	; 1
 d5c:	73 df       	rcall	.-282    	; 0xc44 <__fp_powser>
 d5e:	8b 01       	movw	r16, r22
 d60:	be 01       	movw	r22, r28
 d62:	ec 01       	movw	r28, r24
 d64:	fb 2e       	mov	r15, r27
 d66:	6f 57       	subi	r22, 0x7F	; 127
 d68:	71 09       	sbc	r23, r1
 d6a:	75 95       	asr	r23
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 0b       	sbc	r24, r24
 d70:	99 0b       	sbc	r25, r25
 d72:	fc dd       	rcall	.-1032   	; 0x96c <__floatsisf>
 d74:	28 e1       	ldi	r18, 0x18	; 24
 d76:	32 e7       	ldi	r19, 0x72	; 114
 d78:	41 e3       	ldi	r20, 0x31	; 49
 d7a:	5f e3       	ldi	r21, 0x3F	; 63
 d7c:	8f de       	rcall	.-738    	; 0xa9c <__mulsf3x>
 d7e:	af 2d       	mov	r26, r15
 d80:	98 01       	movw	r18, r16
 d82:	ae 01       	movw	r20, r28
 d84:	ff 90       	pop	r15
 d86:	0f 91       	pop	r16
 d88:	1f 91       	pop	r17
 d8a:	cf 91       	pop	r28
 d8c:	df 91       	pop	r29
 d8e:	68 dd       	rcall	.-1328   	; 0x860 <__addsf3x>
 d90:	3f ce       	rjmp	.-898    	; 0xa10 <__fp_round>

00000d92 <modf>:
 d92:	fa 01       	movw	r30, r20
 d94:	dc 01       	movw	r26, r24
 d96:	aa 0f       	add	r26, r26
 d98:	bb 1f       	adc	r27, r27
 d9a:	9b 01       	movw	r18, r22
 d9c:	ac 01       	movw	r20, r24
 d9e:	bf 57       	subi	r27, 0x7F	; 127
 da0:	28 f4       	brcc	.+10     	; 0xdac <modf+0x1a>
 da2:	22 27       	eor	r18, r18
 da4:	33 27       	eor	r19, r19
 da6:	44 27       	eor	r20, r20
 da8:	50 78       	andi	r21, 0x80	; 128
 daa:	1f c0       	rjmp	.+62     	; 0xdea <modf+0x58>
 dac:	b7 51       	subi	r27, 0x17	; 23
 dae:	88 f4       	brcc	.+34     	; 0xdd2 <modf+0x40>
 db0:	ab 2f       	mov	r26, r27
 db2:	00 24       	eor	r0, r0
 db4:	46 95       	lsr	r20
 db6:	37 95       	ror	r19
 db8:	27 95       	ror	r18
 dba:	01 1c       	adc	r0, r1
 dbc:	a3 95       	inc	r26
 dbe:	d2 f3       	brmi	.-12     	; 0xdb4 <modf+0x22>
 dc0:	00 20       	and	r0, r0
 dc2:	69 f0       	breq	.+26     	; 0xdde <modf+0x4c>
 dc4:	22 0f       	add	r18, r18
 dc6:	33 1f       	adc	r19, r19
 dc8:	44 1f       	adc	r20, r20
 dca:	b3 95       	inc	r27
 dcc:	da f3       	brmi	.-10     	; 0xdc4 <modf+0x32>
 dce:	0d d0       	rcall	.+26     	; 0xdea <modf+0x58>
 dd0:	35 cd       	rjmp	.-1430   	; 0x83c <__subsf3>
 dd2:	61 30       	cpi	r22, 0x01	; 1
 dd4:	71 05       	cpc	r23, r1
 dd6:	a0 e8       	ldi	r26, 0x80	; 128
 dd8:	8a 07       	cpc	r24, r26
 dda:	b9 46       	sbci	r27, 0x69	; 105
 ddc:	30 f4       	brcc	.+12     	; 0xdea <modf+0x58>
 dde:	9b 01       	movw	r18, r22
 de0:	ac 01       	movw	r20, r24
 de2:	66 27       	eor	r22, r22
 de4:	77 27       	eor	r23, r23
 de6:	88 27       	eor	r24, r24
 de8:	90 78       	andi	r25, 0x80	; 128
 dea:	30 96       	adiw	r30, 0x00	; 0
 dec:	21 f0       	breq	.+8      	; 0xdf6 <modf+0x64>
 dee:	20 83       	st	Z, r18
 df0:	31 83       	std	Z+1, r19	; 0x01
 df2:	42 83       	std	Z+2, r20	; 0x02
 df4:	53 83       	std	Z+3, r21	; 0x03
 df6:	08 95       	ret

00000df8 <__divsf3>:
 df8:	0c d0       	rcall	.+24     	; 0xe12 <__divsf3x>
 dfa:	0a ce       	rjmp	.-1004   	; 0xa10 <__fp_round>
 dfc:	02 de       	rcall	.-1020   	; 0xa02 <__fp_pscB>
 dfe:	40 f0       	brcs	.+16     	; 0xe10 <__divsf3+0x18>
 e00:	f9 dd       	rcall	.-1038   	; 0x9f4 <__fp_pscA>
 e02:	30 f0       	brcs	.+12     	; 0xe10 <__divsf3+0x18>
 e04:	21 f4       	brne	.+8      	; 0xe0e <__divsf3+0x16>
 e06:	5f 3f       	cpi	r21, 0xFF	; 255
 e08:	19 f0       	breq	.+6      	; 0xe10 <__divsf3+0x18>
 e0a:	eb cd       	rjmp	.-1066   	; 0x9e2 <__fp_inf>
 e0c:	51 11       	cpse	r21, r1
 e0e:	34 ce       	rjmp	.-920    	; 0xa78 <__fp_szero>
 e10:	ee cd       	rjmp	.-1060   	; 0x9ee <__fp_nan>

00000e12 <__divsf3x>:
 e12:	0f de       	rcall	.-994    	; 0xa32 <__fp_split3>
 e14:	98 f3       	brcs	.-26     	; 0xdfc <__divsf3+0x4>

00000e16 <__divsf3_pse>:
 e16:	99 23       	and	r25, r25
 e18:	c9 f3       	breq	.-14     	; 0xe0c <__divsf3+0x14>
 e1a:	55 23       	and	r21, r21
 e1c:	b1 f3       	breq	.-20     	; 0xe0a <__divsf3+0x12>
 e1e:	95 1b       	sub	r25, r21
 e20:	55 0b       	sbc	r21, r21
 e22:	bb 27       	eor	r27, r27
 e24:	aa 27       	eor	r26, r26
 e26:	62 17       	cp	r22, r18
 e28:	73 07       	cpc	r23, r19
 e2a:	84 07       	cpc	r24, r20
 e2c:	38 f0       	brcs	.+14     	; 0xe3c <__divsf3_pse+0x26>
 e2e:	9f 5f       	subi	r25, 0xFF	; 255
 e30:	5f 4f       	sbci	r21, 0xFF	; 255
 e32:	22 0f       	add	r18, r18
 e34:	33 1f       	adc	r19, r19
 e36:	44 1f       	adc	r20, r20
 e38:	aa 1f       	adc	r26, r26
 e3a:	a9 f3       	breq	.-22     	; 0xe26 <__divsf3_pse+0x10>
 e3c:	33 d0       	rcall	.+102    	; 0xea4 <__divsf3_pse+0x8e>
 e3e:	0e 2e       	mov	r0, r30
 e40:	3a f0       	brmi	.+14     	; 0xe50 <__divsf3_pse+0x3a>
 e42:	e0 e8       	ldi	r30, 0x80	; 128
 e44:	30 d0       	rcall	.+96     	; 0xea6 <__divsf3_pse+0x90>
 e46:	91 50       	subi	r25, 0x01	; 1
 e48:	50 40       	sbci	r21, 0x00	; 0
 e4a:	e6 95       	lsr	r30
 e4c:	00 1c       	adc	r0, r0
 e4e:	ca f7       	brpl	.-14     	; 0xe42 <__divsf3_pse+0x2c>
 e50:	29 d0       	rcall	.+82     	; 0xea4 <__divsf3_pse+0x8e>
 e52:	fe 2f       	mov	r31, r30
 e54:	27 d0       	rcall	.+78     	; 0xea4 <__divsf3_pse+0x8e>
 e56:	66 0f       	add	r22, r22
 e58:	77 1f       	adc	r23, r23
 e5a:	88 1f       	adc	r24, r24
 e5c:	bb 1f       	adc	r27, r27
 e5e:	26 17       	cp	r18, r22
 e60:	37 07       	cpc	r19, r23
 e62:	48 07       	cpc	r20, r24
 e64:	ab 07       	cpc	r26, r27
 e66:	b0 e8       	ldi	r27, 0x80	; 128
 e68:	09 f0       	breq	.+2      	; 0xe6c <__divsf3_pse+0x56>
 e6a:	bb 0b       	sbc	r27, r27
 e6c:	80 2d       	mov	r24, r0
 e6e:	bf 01       	movw	r22, r30
 e70:	ff 27       	eor	r31, r31
 e72:	93 58       	subi	r25, 0x83	; 131
 e74:	5f 4f       	sbci	r21, 0xFF	; 255
 e76:	2a f0       	brmi	.+10     	; 0xe82 <__divsf3_pse+0x6c>
 e78:	9e 3f       	cpi	r25, 0xFE	; 254
 e7a:	51 05       	cpc	r21, r1
 e7c:	68 f0       	brcs	.+26     	; 0xe98 <__divsf3_pse+0x82>
 e7e:	b1 cd       	rjmp	.-1182   	; 0x9e2 <__fp_inf>
 e80:	fb cd       	rjmp	.-1034   	; 0xa78 <__fp_szero>
 e82:	5f 3f       	cpi	r21, 0xFF	; 255
 e84:	ec f3       	brlt	.-6      	; 0xe80 <__divsf3_pse+0x6a>
 e86:	98 3e       	cpi	r25, 0xE8	; 232
 e88:	dc f3       	brlt	.-10     	; 0xe80 <__divsf3_pse+0x6a>
 e8a:	86 95       	lsr	r24
 e8c:	77 95       	ror	r23
 e8e:	67 95       	ror	r22
 e90:	b7 95       	ror	r27
 e92:	f7 95       	ror	r31
 e94:	9f 5f       	subi	r25, 0xFF	; 255
 e96:	c9 f7       	brne	.-14     	; 0xe8a <__divsf3_pse+0x74>
 e98:	88 0f       	add	r24, r24
 e9a:	91 1d       	adc	r25, r1
 e9c:	96 95       	lsr	r25
 e9e:	87 95       	ror	r24
 ea0:	97 f9       	bld	r25, 7
 ea2:	08 95       	ret
 ea4:	e1 e0       	ldi	r30, 0x01	; 1
 ea6:	66 0f       	add	r22, r22
 ea8:	77 1f       	adc	r23, r23
 eaa:	88 1f       	adc	r24, r24
 eac:	bb 1f       	adc	r27, r27
 eae:	62 17       	cp	r22, r18
 eb0:	73 07       	cpc	r23, r19
 eb2:	84 07       	cpc	r24, r20
 eb4:	ba 07       	cpc	r27, r26
 eb6:	20 f0       	brcs	.+8      	; 0xec0 <__divsf3_pse+0xaa>
 eb8:	62 1b       	sub	r22, r18
 eba:	73 0b       	sbc	r23, r19
 ebc:	84 0b       	sbc	r24, r20
 ebe:	ba 0b       	sbc	r27, r26
 ec0:	ee 1f       	adc	r30, r30
 ec2:	88 f7       	brcc	.-30     	; 0xea6 <__divsf3_pse+0x90>
 ec4:	e0 95       	com	r30
 ec6:	08 95       	ret

00000ec8 <__fp_mpack>:
 ec8:	9f 3f       	cpi	r25, 0xFF	; 255
 eca:	31 f0       	breq	.+12     	; 0xed8 <__fp_mpack_finite+0xc>

00000ecc <__fp_mpack_finite>:
 ecc:	91 50       	subi	r25, 0x01	; 1
 ece:	20 f4       	brcc	.+8      	; 0xed8 <__fp_mpack_finite+0xc>
 ed0:	87 95       	ror	r24
 ed2:	77 95       	ror	r23
 ed4:	67 95       	ror	r22
 ed6:	b7 95       	ror	r27
 ed8:	88 0f       	add	r24, r24
 eda:	91 1d       	adc	r25, r1
 edc:	96 95       	lsr	r25
 ede:	87 95       	ror	r24
 ee0:	97 f9       	bld	r25, 7
 ee2:	08 95       	ret

00000ee4 <__udivmodhi4>:
 ee4:	aa 1b       	sub	r26, r26
 ee6:	bb 1b       	sub	r27, r27
 ee8:	51 e1       	ldi	r21, 0x11	; 17
 eea:	07 c0       	rjmp	.+14     	; 0xefa <__udivmodhi4_ep>

00000eec <__udivmodhi4_loop>:
 eec:	aa 1f       	adc	r26, r26
 eee:	bb 1f       	adc	r27, r27
 ef0:	a6 17       	cp	r26, r22
 ef2:	b7 07       	cpc	r27, r23
 ef4:	10 f0       	brcs	.+4      	; 0xefa <__udivmodhi4_ep>
 ef6:	a6 1b       	sub	r26, r22
 ef8:	b7 0b       	sbc	r27, r23

00000efa <__udivmodhi4_ep>:
 efa:	88 1f       	adc	r24, r24
 efc:	99 1f       	adc	r25, r25
 efe:	5a 95       	dec	r21
 f00:	a9 f7       	brne	.-22     	; 0xeec <__udivmodhi4_loop>
 f02:	80 95       	com	r24
 f04:	90 95       	com	r25
 f06:	bc 01       	movw	r22, r24
 f08:	cd 01       	movw	r24, r26
 f0a:	08 95       	ret

00000f0c <__divmodhi4>:
 f0c:	97 fb       	bst	r25, 7
 f0e:	09 2e       	mov	r0, r25
 f10:	07 26       	eor	r0, r23
 f12:	0a d0       	rcall	.+20     	; 0xf28 <__divmodhi4_neg1>
 f14:	77 fd       	sbrc	r23, 7
 f16:	04 d0       	rcall	.+8      	; 0xf20 <__divmodhi4_neg2>
 f18:	e5 df       	rcall	.-54     	; 0xee4 <__udivmodhi4>
 f1a:	06 d0       	rcall	.+12     	; 0xf28 <__divmodhi4_neg1>
 f1c:	00 20       	and	r0, r0
 f1e:	1a f4       	brpl	.+6      	; 0xf26 <__divmodhi4_exit>

00000f20 <__divmodhi4_neg2>:
 f20:	70 95       	com	r23
 f22:	61 95       	neg	r22
 f24:	7f 4f       	sbci	r23, 0xFF	; 255

00000f26 <__divmodhi4_exit>:
 f26:	08 95       	ret

00000f28 <__divmodhi4_neg1>:
 f28:	f6 f7       	brtc	.-4      	; 0xf26 <__divmodhi4_exit>
 f2a:	90 95       	com	r25
 f2c:	81 95       	neg	r24
 f2e:	9f 4f       	sbci	r25, 0xFF	; 255
 f30:	08 95       	ret

00000f32 <_exit>:
 f32:	f8 94       	cli

00000f34 <__stop_program>:
 f34:	ff cf       	rjmp	.-2      	; 0xf34 <__stop_program>
